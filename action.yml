name: "Notify Slack"
description: "does what the name says. it notfies slack when a build fails."
author: "514 Labs"

inputs:
  slack-bot-token:
    description: 'Slack Bot Token for user lookup'
    required: true
  slack-webhook-url:
    description: 'Slack Webhook URL for notifications'
    required: true

runs:
  using: "composite"
  steps:
    - name: Get Slack User ID
      id: slack-user
      uses: actions/github-script@v7
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slack-bot-token }}
        GITHUB_TOKEN: ${{ github.token }}
      with:
        result-encoding: string
        script: |
          console.log('Event name:', context.eventName);
          console.log('Context info:', context.actor, context.eventName, context.ref);
          
          let email = null;
          
          // For workflow_dispatch events or when we don't have commit info
          if (!email && context.actor) {
            console.log('Trying to get email for actor:', context.actor);
            
            try {
              // Try to get the user's email from GitHub API
              const { data: userData } = await github.rest.users.getByUsername({
                username: context.actor
              });
              
              console.log('User data:', userData);
              
              if (userData.email) {
                email = userData.email;
                console.log('Found email for actor:', email);
              } else {
                // Try to get commits by the user to find their email
                const { data: commits } = await github.rest.repos.listCommits({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  author: context.actor,
                  per_page: 1
                });
                
                if (commits && commits.length > 0 && commits[0].commit.author) {
                  email = commits[0].commit.author.email;
                  console.log('Found email from user commits:', email);
                }
              }
            } catch (error) {
              console.error('Error fetching user data:', error);
            }
          }
          
          // If we still don't have an email, use the actor username as fallback
          if (!email) {
            console.log('Could not find email, using actor as fallback:', context.actor);
            return context.actor;
          }
          
          // Try to find the Slack user by email
          let slackUserId = email;
          try {
            const response = await fetch(`https://slack.com/api/users.lookupByEmail?email=${encodeURIComponent(email)}`, {
              method: 'GET',
              headers: {
                'Authorization': `Bearer ${process.env.SLACK_BOT_TOKEN}`,
                'Content-Type': 'application/json'
              }
            });
            const data = await response.json();
            console.log('Slack API response:', data);
            if (data.ok && data.user) {
              slackUserId = data.user.id;
            }
          } catch (error) {
            console.error('Error looking up Slack user:', error);
          }
          
          return slackUserId;

    - name: Construct Slack payload
      id: slack-payload
      uses: actions/github-script@v7
      with:
        result-encoding: string
        script: |
          const workflowName = context.workflow;
          const slackUserId = process.env.SLACK_USER_ID;

          const message = `ðŸš¨ ${workflowName} failed!

          Workflow: ${workflowName}
          Repo: ${context.repo.owner}/${context.repo.repo}
          Branch: ${context.ref.replace('refs/heads/', '')}
          Commit: ${context.sha}
          Author: <@${slackUserId}>
          See: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

          return JSON.stringify({ text: message }, null, 2);
      env:
        SLACK_USER_ID: ${{ steps.slack-user.outputs.result }}

    - name: Notify Slack on failure
      uses: slackapi/slack-github-action@v1.25.0
      with:
        payload: ${{ steps.slack-payload.outputs.result }}
      env:
        SLACK_WEBHOOK_URL: ${{ inputs.slack-webhook-url }}
